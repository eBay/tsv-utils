# Workflow to run a D compile on Windows. No tests, just the build step. 
name: build-test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  windows-build:
    name: Build tsv-utils on Windows
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest]
        dc: [dmd-latest, ldc-latest]

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v2

      - name: Install D compiler
        uses: dlang-community/setup-dlang@v1
        with:
          compiler: ${{ matrix.dc }}

      - name: Dub Build and Run
        shell: bash
        run: |
          dub run
          dub clean
          make clean

      - name: make unittest
        # Currently, only run unit tests on DMD. LDC has failures in tsv-sample due
        # to minor descrepancies in printed random numbers.
        if: ${{ startsWith(matrix.dc, 'dmd') }}
        shell: bash
        run: |
          make unittest DCOMPILER=${DC} DFLAGS=-m64

  linux-macos-build:
    name: Build tsv-utils on Linux, macOS
    strategy:
      fail-fast: false
      matrix:
        os: [macOS-latest, ubuntu-latest]
        dc: [ldc-latest, dmd-latest]
        include:
          - os: ubuntu-latest
            dc: dmd-2.088.1

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v2

      - name: Install D compiler
        uses: dlang-community/setup-dlang@v1
        with:
          compiler: ${{ matrix.dc }}

      - name: Dub Build and Run using DMD
        if: ${{ startsWith(matrix.dc, 'dmd') }}
        shell: bash
        run: |
          dub run
          dub clean
          make clean

      - name: make test
        shell: bash
        run: |
          make test DCOMPILER=${DC}
          make clean

      - name: make test-release ldc-lto-pgo
        if: ${{ startsWith(matrix.dc, 'ldc') }}
        shell: bash
        run: |
          make test-release DCOMPILER=${DC} LDC_LTO_RUNTIME=1 LDC_PGO=2
          make clean
